// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  name     String
  email    String    @unique
  role     USER_ROLE @default(general_user)
  password String
  image    String?
  isBanned Boolean   @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orders Order[]

  @@map("users")
}

model MealCategory {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  mealItems MealItem[]

  @@map("meal_categories")
}

model MealItem {
  id   String @id @default(uuid())
  name String

  mealCategoryId String       @map("meal_category_id")
  mealCategory   MealCategory @relation(fields: [mealCategoryId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  riceAvailableMeals       AvailableMealPerDay[] @relation("RiceRelation")
  proteinAvailableMeals    AvailableMealPerDay[] @relation("ProteinMealRelation")
  otherItem1AvailableMeals AvailableMealPerDay[] @relation("OtherItem1Relation")
  otherItem2AvailableMeals AvailableMealPerDay[] @relation("OtherItem2Relation")
  otherItem3AvailableMeals AvailableMealPerDay[] @relation("OtherItem3Relation")

  userChosenMeal1 Order[] @relation("chosenMealItem1Relation")
  userChosenMeal2 Order[] @relation("chosenMealItem2Relation")
  userChosenMeal3 Order[] @relation("chosenMealItem3Relation")

  @@unique([name, mealCategoryId])
  @@map("meal_items")
}

model AvailableMealPerDay {
  id      String   @id @default(uuid())
  dayName DAY_LIST @unique @map("day_name")

  riceId String
  rice   MealItem @relation("RiceRelation", fields: [riceId], references: [id])

  proteinMealId String
  proteinMeal   MealItem @relation("ProteinMealRelation", fields: [proteinMealId], references: [id])

  otherItemId1 String?
  otherItem1   MealItem? @relation("OtherItem1Relation", fields: [otherItemId1], references: [id])

  otherItemId2 String?
  otherItem2   MealItem? @relation("OtherItem2Relation", fields: [otherItemId2], references: [id])

  otherItemId3 String?
  otherItem3   MealItem? @relation("OtherItem3Relation", fields: [otherItemId3], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("available_meal_per_day")
}

model Order {
  id      String   @id @default(uuid())
  dayName DAY_LIST @map("day_name")

  userId String
  user   User   @relation(fields: [userId], references: [id])

  date String

  chosenMealId1 String?
  chosenMeal1   MealItem? @relation("chosenMealItem1Relation", fields: [chosenMealId1], references: [id])

  chosenMealId2 String?
  chosenMeal2   MealItem? @relation("chosenMealItem2Relation", fields: [chosenMealId2], references: [id])

  chosenMealId3 String?
  chosenMeal3   MealItem? @relation("chosenMealItem3Relation", fields: [chosenMealId3], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([dayName, date])
  @@map("orders")
}

enum USER_ROLE {
  admin
  general_user
}

enum DAY_LIST {
  saturday
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
}
